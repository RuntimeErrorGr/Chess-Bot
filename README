Echipa: Oxfff
Botici Irina
Hudisteanu Cristina Elena
Labau Cristea Andrei Liviu


ETAPA 1:
In cadrul acestei etape am implementat urmatoarele functionalitati pentru
un pion:
	- saltul catre o casuta a tablei
	- saltul catre doua casute (in cazul in care 
		   suntem la prima mutare a acestuia)
	- capturarea pe diagonala a unei alte piese 
Cat si functionalitatile pentru urmatoarele comenzi : feature, go, force, move

Specificatii implementare: 

Pentru aceasta etapa, am ales sa hardcodam pozitia pionului cu care vom lucra,
fiind cel mai din stanga pion (pionul cu pozitia de start a7 pentru negru respectiv a2 pentru alb).
Alegem ca in momentul in care acesta ramane fara mutari sau se transforma in regina, sa dam resign.


Parser : - clasa care contine metodele aferente parsarii informatiilor rezul-
	tate in urma comunicarii cu interfata xboard.
Atribute : 
	enginesColor - contine culoarea cu care joaca masina
	noMoves - este un counter care ne va ajuta sa ne dam seama cate mutari
		s-au efectuat in Edit mode
	Scanner - reader-ul cu care vom citi de la standard input
	chessBoard - instanta pentru tabla de sah
	isForced - boolean care ne ajuta sa ne dam seama daca suntem in edit mode
	chessPiece - Piesa de sah cu care lucram
Metode:
	 - public void parse() : 
		      -> in cadrul acestei metode se petrece citirea continua
		      de la standard input, in urma carora se apeleaza me-
		      todele aferente fiecarei comenzi in parte
	- public void feature() : 
		      -> trimitem catre xboard comanda "feature" prin care 
		      stabilim configuratia parametrilor sigint, san si name
	- public void New() : 
		      -> aceasta metoda are rolul de a reseta toti parametrii
		      cu care lucram pe parcursul implementarii, inclusiv
		      reprezentarea interna a tablei de sah 
	- public void go() :
		      -> pentru a tine evidenta culorii care este la mutare
			 (util pentru cazul in care se intra in modul "edit",
			 se efectueaza un numar de mutari si apoi se da comanda 
			"Machine cine_este_la_mutare") am folosit o variabila 
			statica care se incrementeaza de fiecare data cand botul 
			isi actualizeaza matricea. In momentul in care se da comanda
			go, daca au fost efectuate un numar par de mutari inseamna ca 
			este randul albului, iar daca este un numar impar este randul negrului.
		     -> Dupa stabilirea culorii pionului care va fi mutat se verifica daca
			nu cumva pionul nostru a fost capturat in modul "edit", caz in care
			se da resign. Daca nu a fost capturat se va muta normal.
	- public void move() :
		      -> pentru implementarea acestei functionalitati am decis
		      sa ne folosim de comanda anterioara data de catre xboard
		      -> inainte de toate,
		      -> ne-am folosim de metoda checkIfEnginesTurn pentru a
		      verifica daca ceea ce a fost anterior respecta formatul
		      unei mutari ( litera_cifra_litera_cifra ) ceea ce ne-ar
		      indica ca, intr-adevar, este randul masinii sa mute.
		      Diferentiam doua cazuri : atunci cand nu suntem in Edit
		      mode, iar masina va muta conform regulilor de mutare a
		      pionului si cand suntem in Edit mode, unde atat pentru
		      oponent, cat si pentru masina, mutarile vor fi efectuate
		      de catre utilizator. (in acest caz vom actualiza doar 
		      numarul de mutari facute in Edit mode). Pentru ambele 
		      cazuri, reprezentarea interna a tablei va fi actualizata
		      conform mutarilor care s-au efectuat.
	- public void resign() : 
		      ->transmitem catre xboard comanda de resign prin inter-
		      mediul standard output
	- public void checkIfQueen():
		      -> verificam constant daca pionul nostru a ajuns la capat,
		      pentru ca in acest caz, il vom transforma in regina si vom
		      trimite semnalul de resign
	
		    
ChessBoard : - reprezentarea interna a tablei, unica; implementare cu Singleton

Atribute: 
	Tile[][] matrix - matrice de obiecte de tip Tile (8x8)

Metode:
	- public Tile findTileOnBoard(String coordinates):
		      -> metoda care primeste un set de coordonate (litera_cifra) si localizeaza pe tabla obiectul
		      cu coordonatele date ca parametru si returneaza obiectul gasit.
	- public ChessPiece findPieceOnBoard(String coordinates):
		      -> metoda care primeste un set de coordonate de start si 
		      localizeaza piesa pe tabla ale carei coordonate de start 
		      coincid; returneaza obiectul de tip ChessPiece
	- public void initializeBoard() : 
		      -> metoda care initializeaza matricea aferenta cu obiecte
		      de tip tile, iar pentru fiecare obiect stabileste culoarea
		      casutei si coordonata fixa a acesteia
		      -> apelam placePiecesOnBoard pentru a plasa piesele in po-
		      zitia lor initiala (de start)
	- private void placePiecesOnBoard() :
		      -> metoda care ne ajuta sa completam cele doua randuri, de
		      sus si de jos cu piesele corespunzatoare.
		      -> intai pentru margini, unde vom creea piese de tip King,
		      Queen, Bishop, Knight si Rook si le vom plasa pe pozitia 
		      initiala 
		      * Pentru a creea piesele, ne-am folosit de un PieceFactory
		      unde in functie de tipul primit, utilizand Buildere, vom 
		      returna piesa creata
		      -> al doilea rand de sus si de jos va fi completat cu pioni
	- public void updateMatrix(String coordinates):
		      -> metoda care va primi un set de coordonate initiale-finale
		      (litera_cifra_litera_cifra) si va actualiza matricea in func-
		      tie de mutarile efectuate atat de utilizator cat si de masina
		      -> intai cautam obiectele de tip Tile aferente coordonatelor
		      initiale si finale
		      -> in cazul in care finishTile este ocupat, inseamna ca, in
		      urma mutarii, piesa care se afla initial acolo va fi captura-
		      ta, deci va fi eliminata de pe tabla ( noi marcam acest lucru
		      prin setarea coordonatelor de start ca fiind sirul gol )
		      -> initialTile va fi eliberat ( nu se va mai afla nici o pie-
		      sa pe aceasta, iar din ocupata va deveni neocupata)
		      -> piesei care a fost mutata ii vor fi actualizate coordo-
		      natele curente si vom verifica cu ajutorul functiei 
		      promotePawn daca acesta a ajuns la capatul tablei, adica va
		      fi transformat in regina
		      -> finishTiile va fi setat ca ocupat
	- public void resetBoard() :
		      -> metoda care ne ajuta sa reinitializam matricea
Tile : - contine obiecte care reprezinta o casuta a tablei de sah

	Atribute : 
	- color - culoarea casutei (alb - true, negru - false)
	- isOccupied - este ocupata sau nu
	- chessPiece - piesa care ocupa casuta (este null, daca este neocupata)
	- coordinates - coordonatele fixate la inceput 

ChessPiece: - clasa abstracta care contine elemente de tip piesa de sah
	    - aceasta va fi extinsa de : pioni, nebuni, rege, regina, cai si ture
	Atribute:
	- color - culearea piesei de sah
	- pieceType - tipul piesei de sah : "pawn", "knight", "king", "queen"
					    "knight", "rook"
	- currCoordinates - coordonatele curente ale piesei
	- startCoordinates - coordonatele initiale (atribuite in momentul in care
	am initializat tabla), acestia vor reprezenta identificatori unici pentru
	piesele noastre

Pawn:   - extinde ChessPiece
	- contine obiecte de tip pion
	Atribute : 
	- firstMove - boolean care ne indica daca este prima mutare pentru un pion;
	avem nevoie de acesta deoarece in momentul in care pionul este pe pozitia
	initiala, putem sari doua casute
Metode:
	- public void move() :
		       -> metoda care are rolul de a implementa functionalitatea de
		       move 
		       -> vom obtine coordonatele noii pozitii in urma apelului me-
		       todei computeMove()
		       -> daca coordonatele initiale coincid cu coordonatele rezul-
		       tate in urma apelului functiei, inseamna ca nu exista o alta
		       mutare valida, iar atunci vom trimite semnalul de resign 
		       catre xboard
		       -> altfel, vom trimite comanda rezultata din concatenarea
		       "move" si setul coord_finalacoordonata_iniitiala
	- public String computeMove():
		       -> metoda care apeleaza moveBlack si moveWhite in functie de
		       de culoarea cu care joaca engine-ul
		       -> incepem prin a extrage litera si numarul aferente coordo-
		       natelor curente ale pionului, scopul fiind de a genera noile
		       coordonate si de efectua mutarea
		       -> apelam in functie de culoare moveBlack si moveWhite si 
		       apoi setam coordonatele rezultate ca fiind curente
		       -> actualizam matricea
		       -> returnam setul coordonateInitialecoordonateFinale sub 
		       forma unui string
	- private String moveBlack(char letter, char number) : 
		       -> metoda care genereaza pentru un pion negru cea mai buna
		       mutare valabila
		       -> incepem prin a identifica Tile-urile posibile pe care 
		       poate ajunge pionul : front, frontfront, left si right
		       -> tratam cazurile posibile de a muta:
			  - identificam 3 cazuri : 
				-cand left e null (deci pionul se afla pe cel mai
				din stanga rand), avem optiunea ca in cazul in
				care right e ocupat de o piesa cu o culoare dife-
				rita, sa capturam respectiva piesa, iar daca nu 
				este ocupat, sa inaintam doua casute (in
				caz ca suntem la prima mutare a pionului) sau una
				in caz contrar (tinem cont daca casuta in care 
				dorim sa inaintam este ocupata de o alta piesa, mu-
				tarea pe care dorim sa o efectuam devenind imposi-
				bila)
				- cazul in care right e null si procedam analog
				- cazul in care nici left nici right nu sunt null
				cand incepem sa verificam daca left este ocupat de
				o piesa cu o culoare diferita, rezultand capturarea
				iar in cazul in care nu s-a gasit nimic, verificam
				pe dreapta, iar daca nici atunci, procedam ca in 
				cazul de baza si inaintam o casuta sau doua in 
				functie de posibilitate (in cazul in care acestea
				nu sunt ocupata)
	- private String moveWhite(char letter, char number) : 
				- se procedeaza analog ca la moveWhite

Bishop: - extinde ChessPiece
	- contine obiecte de tip nebun
	- urmeaza a fi implementat mai departe in urmatoarea etapa
Knight: - extinde ChessPiece
	- contine obiecte de tip cal
	- urmeaza a fi implementat mai departe in urmatoarea etapa

King:	- extinde ChessPiece
	- contine obiecte de tip rege
	- urmeaza a fi implementat mai departe in urmatoarea etapa

Queen:	- extinde ChessPiece
	- contine obiecte de tip regina
	- urmeaza a fi implementat mai departe in urmatoarea etapa

Rook:	- extinde ChessPiece
	- contine obiecte de tip tura
	- urmeaza a fi implementat mai departe in urmatoarea etapa

Contributia coechipierilor:
	- Labau: implementarea claselor din pachetele Board & Piece si debug
	- Hudisteanu: implementarea claselor din pachetele Board & Piece si debug
	- Botici: tot ce tine de pachetul Parser, Makefile si javadoc, debug

ETAPA 2:
Principalele functionalitati aditionale implementate in aceasta etapa au fost:
	1) miscarea tuturor pieselor pe tabla cu mutari legale
	2) en passant (decizie de executare en passant + update reprezentare interna)
	3) rocada mica (decizie de executare rocada + update reprezentare interna)
	4) rocada mare (decizie de executare rocada + update reprezentare interna)
	5) constientizarea sahului
	5) apararea impotriva sahului simplu 
	6) apararea impotriva sahului prin descoperire
	7) blocarea mutarii unei piese care apara regele 
	8) promovarea pionului
	Toate sunt valabile atat pentru bot alb cat si pentru bot negru.

	1) Pentru implementarea miscarii tuturor pieselor am folosit scheletul de cod
	de la etapa 1 la care am adaugat metodele move() si computemove()
	pentru fiecare tip de piesa in parte.
	La inceputul jocului sunt stocate in 2 liste piesele albe si piesele negre.
	La fiecare mutare, este aleasa o piesa in mod aleator din lista corespunzatoare
	culorii botului.
	Toate piesele, cu exceptia pionului, urmeaza acelasi tipar:
		- Sunt stabilite toate pozitiile eligibile in care respectiva piesa
		poate fi mutata in metoda computeEligiblePositions(). Acestea sunt
		stocate intr-o lista. 
		- Se verifica daca avem cel putin o pozitie eligibila
		pentru mutare (diferita de pozitia initiala a piesei).
		- Daca da, deoarece nu avem o strategie de joc, este alesa o mutare aleatoare din lista de mutari eligibile, respectandu-se 2 conditii: regele botului sa nu
		fie in sah si piesa care a fost aleasa pentru mutare sa nu apere regele.
		Daca una dintre aceste conditii nu este respectata, este aleasa alta piesa
		din lista de piese disponibile. De asemenea se alege alta piesa daca
		piesa selectata nu are mutari disponibile. Daca piesa aleasa nu are mutari
		disponibile si in lista de piese disponibile nu mai exista nicio piesa
		se da resign.
		- De asemenea, inainte de efectuarea oricarei mutari aleatoare se verifica
		prioritar daca regele este in sah, caz in care acesta este selectat, se
		verifica lista de pozitii eligibile in care acesta poate fi mutat astfel
		incat sa scape din sah. Daca nu exista nici macar o astfel de pozitie,
		se da resign. Modalitatile de tratare si aparare impotriva sahului vor
		fi detaliate mai jos.
		- A doua miscare prioritara, dupa apararea impotriva sahului este rocada.
		Pentru aceasta se verifica toate conditiile de efectuare a celor 2 rocade
		(daca ambele sunt disponibile se alege rocada mica).
	Datorita implementarii deja existente de la etapa 1 pentru pion am ales sa nu
	mai calculam toate mutarile disponibile si pur si simplu sa le verificam
	intr-o ierarhie de if else (capturari, salturi, en passant, inaintare si
	promovare).
	Toate aceste verificari amintite mai sus sunt integrate in flowul executiei
	programului in clasa Parser, metoda parse().

	Metode importante regasite in implementarea fiecarei piese sunt:
		a) computeEligiblePositions() -> conform regulilor jocului de sah
		se verifica toate directiile in care o anumita piesa poate fi mutata
		si se obtine o lista cu coordonatele posibilelor campuri. Daca pe
		directia respectiva se intalneste o piesa inseamna ca nu se poate inainte
		mai mult de acele coordonate si cautarea se opreste in respectiva directie.
		Piesele care fac exceptie de la aceasta regula sunt caii, regele si pionii.
		Pentru cai se verifica cele 8 pozitii posibile. Similar pentru rege si pion.
		b) givesChess() -> metoda foarte importanta care seteaza variabila statica
		inChess din parser in cazul in care pe una dintre traiectoriile de atac
		ale unei piese adverse este intalnit regele.
		c) defending() -> metoda cu ajutorul careia se verifica daca o piesa
		se afla pe traiectoria de atac a unei piese adverse si in plus, daca
		in continuarea traiectoriei, de la piesa curenta incolo se afla regele.
		In acest caz se considera ca piesa in cauza apara regele, asa ca nu
		va putea fi mutata pana cand nu se muta regele ori piesa adversa care
		il ameninta.

	2) En passant se executa prioritar pentru orice pion al botului care
	indeplineste conditia de executie.
	Pentru a verifica daca un pion este sau nu eligibil de a fi capturat prin
	en passan ne folosim de 2 atribute boolean enPassR -> este pasibil de capturare
	din dreapta si enPassL -> este pasibil de capturare din stanga.
	Acestea sunt setate in momentul in care updatam matricea de reprezentare
	interna dupa fiecare mutare. Concret, se verifica daca pionul este la prima
	sa mutare, dare prima mutare a fost un salt (s-au mutat 2 casute, nu una) si
	daca pe o casuta vecina (dreapta - stanga) se afla un pion al adversarului
	atunci pionul curent este considerat eligibil de a fi capturat prin en passant.
	Daca in runda curenta in care capturarea este disponibila s-a efectuat o mutare
	diferita, atunci eligibilitatea de capturare dispare.

	3) Rocada mica este mutare prioritara. Sunt verificate conditiile de
	efectuare a rocadei (checkKingSideCastling()) si daca sunt ideplinite, atunci
	este efectuata. De mare ajutor aici a fost metoda isGuarded(), metoda
	aferenta unui obiect de tip Tile, care verifica daca un camp este atacabil
	sau nu de orice piesa adversa la un moment dat. Concret, in metoda isGuarded()
	se porneste de la coordonatele unui anumit camp de pe tabla si se verifica ce
	piese exista in toate directiile. Daca cumva este intalnita o piesa de a noastra
	pe o anumita traiectorie inseamna ca tileul curent nu este atacabil.
	Dar daca este intalnita o piesa a adversarului se verifica traiectoriile de 
	atac ale piesei si in cazul in care acestea coincid cu campul curent, inseamna
	ca acesta este atacabil.
	De asemenea se mai verifica campurile dintre rege si tura din dreapta sa fie
	libere, regele sa nu fie in sah, regele si tura sa nu fi fost mutate pana 
	la momentul respectiv si tura inca sa fie in joc (sa nu fi fost capturata).

	4) Rocada mare este prioritara daca rocada mica nu a putut fi efectuata.
	Verificarile sunt foarte asemanatoare cu rocada mica, doar ca mai exista
	conditia ca si campul reginei sa fie liber.

	5) 6) 7) Constientizarea sahului se face la updatarea matricei de reprezentare
	interna dupa fiecare runda. Practic se verifica cu ajutorul metodei
	givesChess() descrisa la punctul 1)b) daca regele nostru se afla pe traiectoria
	de atac a vreunei piese adverse, iar traiectoria nu este blocata de o alta
	piesa, fie ea a noastra sau a adversarului. Am luat aici in considerare
	atat posibilitatea ca adversarul sa dea sah direct in urma unei mutari,
	cat si posibilitatile de a da sah prin descoperire (piesa mutata da sah
	si da si o alta piesa pe care a descoperit-o sau piesa mutata nu da sah,
	dar da o alta piesa pe care a descoperit-o).
	Constientizarea sahului este un pas foarte important pentru ca in functie
	de acesta se alege daca in runda curenta se efectueaza o rocada, se muta
	o piesa aleatoare sau se muta regele (in cazul in care este in sah).
	Apararea impotriva sahului de orice tip se efectueaza prin mutarea regelui
	intr-o casuta care nu este atacabila sau prin capturarea piesei adverse
	care da sah de catre rege.

	8) Promovarea pionului se realizeaza in momentul in care un pion ajunge
	pe linia 8 (pentru albe) respectiv pe linia 1 (pentru negre). Promovarea
	se face in functie de parametrul primit dupa setul de coordonate initial-final.
	De exemplu g7g8q -> promovare in regina, g7g8n -> promovare in cal,
	g7g8b -> promovare in nebun, g7g8r -> promovare in tura. La efectuarea promovarii
	matricea de reprezentare interna este updatata cu piesa corespunzatoare.

	Contributia coechipierilor:
	- Labau: implementarea en passant, aparare impotriva sahului, rocade, dubug
	- Hudisteanu: implementarea miscarii pieselor, apararea impotriva sahului, debug
	- Botici: Board, rocade, en passant,  Makefile si javadoc, debug
